# 云编译公用核心
name: WRT-CORE

on:
  workflow_call:
    inputs:
      WRT_CONFIG:
        required: true
        type: string
      WRT_THEME:
        required: true
        type: string
      WRT_NAME:
        required: true
        type: string
      WRT_SSID:
        required: true
        type: string
      WRT_WORD:
        required: true
        type: string
      WRT_IP:
        required: true
        type: string
      WRT_PW:
        required: true
        type: string
      WRT_REPO:
        required: true
        type: string
      WRT_BRANCH:
        required: true
        type: string
      WRT_SOURCE:
        required: true
        type: string
      WRT_PACKAGE:
        required: false
        type: string
      WRT_TEST:
        required: false
        type: string

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  WRT_CONFIG: ${{ inputs.WRT_CONFIG }}
  WRT_THEME: ${{ inputs.WRT_THEME }}
  WRT_NAME: ${{ inputs.WRT_NAME }}
  WRT_SSID: ${{ inputs.WRT_SSID }}
  WRT_WORD: ${{ inputs.WRT_WORD }}
  WRT_IP: ${{ inputs.WRT_IP }}
  WRT_PW: ${{ inputs.WRT_PW }}
  WRT_REPO: ${{ inputs.WRT_REPO }}
  WRT_BRANCH: ${{ inputs.WRT_BRANCH }}
  WRT_SOURCE: ${{ inputs.WRT_SOURCE }}
  WRT_PACKAGE: ${{ inputs.WRT_PACKAGE }}
  WRT_TEST: ${{ inputs.WRT_TEST }}

jobs:
  core:
    name: ${{ inputs.WRT_SOURCE }}
    runs-on: ubuntu-latest
    steps:
      - name: Check Server Performance(检查服务器性能)
        run: |
          echo "警告⚠"
          echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
          echo -e "已知CPU型号（降序）：7763，8370C，8272CL，8171M，E5-2673 \n"
          echo "--------------------------CPU信息--------------------------"
          echo "CPU物理数量：$(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
          echo -e "CPU核心信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
          echo "--------------------------内存信息--------------------------"
          echo "已安装内存详细信息："
          echo -e "$(sudo lshw -short -C memory | grep GiB) \n"
          echo "--------------------------硬盘信息--------------------------"
          echo "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

      - name: Initialization Environment(安装依赖环境)
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt -yqq purge firefox
          sudo -E apt -yqq update
          sudo -E apt -yqq full-upgrade
          sudo -E apt -yqq autoremove --purge
          sudo -E apt -yqq autoclean
          sudo -E apt -yqq clean
          sudo -E apt -yqq install dos2unix python3-netifaces libfuse-dev clang
          sudo bash -c 'bash <(curl -sL https://build-scripts.immortalwrt.org/init_build_environment.sh)'
          sudo -E systemctl daemon-reload
          sudo -E timedatectl set-timezone "Asia/Shanghai"

          echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV

      - name: Combine Disks(合并磁盘)
        uses: easimon/maximize-build-space@master
        with:
          swap-size-mb: 2048
          temp-reserve-mb: 100
          root-reserve-mb: 2048

      - name: Checkout Projects(拉取云编译仓库脚本)
        uses: actions/checkout@main

      - name: Initialization Values(初始化变量)
        run: |
          echo "WRT_DATE=$(TZ=UTC-8 date +"%y.%m.%d-%H.%M.%S")" >> $GITHUB_ENV
          echo "WRT_MARK=${GITHUB_REPOSITORY%%/*}" >> $GITHUB_ENV
          echo "WRT_INFO=${WRT_SOURCE%%/*}" >> $GITHUB_ENV
          echo "WRT_TARGET=$(grep -m 1 -oP '^CONFIG_TARGET_\\K[\\w]+(?==y)' ./Config/$WRT_CONFIG.txt || true)" >> $GITHUB_ENV
          echo "WRT_KVER=none" >> $GITHUB_ENV
          echo "WRT_LIST=none" >> $GITHUB_ENV
          sudo mkdir -p $OPENWRT_PATH/build_wrt
          sudo chown $USER:$USER $OPENWRT_PATH/build_wrt
          sudo ln -s $OPENWRT_PATH/build_wrt $GITHUB_WORKSPACE/wrt

      - name: Clone Code(拉取固件源码)
        run: |
          git clone --depth=1 --single-branch --branch $WRT_BRANCH $WRT_REPO ./wrt/
          cd ./wrt/ && echo "WRT_HASH=$(git log -1 --pretty=format:'%h')" >> $GITHUB_ENV
          PROJECT_MIRRORS_FILE="./scripts/projectsmirrors.json"
          if [ -f "$PROJECT_MIRRORS_FILE" ]; then
            sed -i '/.cn\\//d; /tencent/d; /aliyun/d' "$PROJECT_MIRRORS_FILE"
          fi

      - name: Check & Fix Script Permissions(统一执行权限)
        run: |
          find ./ -maxdepth 3 -type f -iregex ".*\\(txt\\|sh\\)$" -exec dos2unix {} \\; -exec chmod +x {} \\;
          chmod +x "$GITHUB_WORKSPACE"/Scripts/*.sh || true

      - name: Prepare authenticated GitHub clone(配置认证克隆，仅用于拉取依赖)
        run: |
          git config --global url."https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/".insteadOf "https://github.com/"
          git config --global http.lowSpeedLimit 1
          git config --global http.lowSpeedTime 600

      - name: Update Feeds(更新软件包源)
        run: |
          cd ./wrt/
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Custom Packages(自定义软件包)
        run: |
          cd ./wrt/
          if [[ "${WRT_CONFIG,,}" == *"small"* || "${WRT_CONFIG,,}" == *"samll"* ]]; then
            echo ">> Detected SMALL config, using Packages_small.sh"
            bash $GITHUB_WORKSPACE/Scripts/Packages_small.sh
          else
            echo ">> Using standard Packages.sh"
            bash $GITHUB_WORKSPACE/Scripts/Packages.sh
          fi

          cd ./package/
          bash $GITHUB_WORKSPACE/Scripts/Handles.sh

      - name: Custom Settings(自定义设置)
        run: |
          cd ./wrt/
          if [[ "${WRT_CONFIG,,}" == *"test"* || "${WRT_CONFIG,,}" == *"small"* || "${WRT_CONFIG,,}" == *"samll"* ]]; then
            cat "$GITHUB_WORKSPACE/Config/$WRT_CONFIG.txt" >> .config
          else
            cat "$GITHUB_WORKSPACE/Config/$WRT_CONFIG.txt" "$GITHUB_WORKSPACE/Config/GENERAL.txt" >> .config
          fi
          dos2unix "$GITHUB_WORKSPACE/Scripts/Settings.sh" || true
          chmod +x "$GITHUB_WORKSPACE/Scripts/Settings.sh" || true
          bash "$GITHUB_WORKSPACE/Scripts/Settings.sh"
          make defconfig -j"$(nproc)" && make clean -j"$(nproc)"

      # 🛠 关键修复：撤销“把 github.com 重写为带 Token 的 URL”，避免 LLVM 报 embedded password。
      - name: Unset tokenized GitHub URL rewrite for LLVM/Rust build(撤销全局 URL 重写)
        run: |
          git config --global --unset-all url."https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/".insteadOf || true
          git config --global --list | grep -E '^(url\\.|http\\.)' || true

      - name: Download Packages(下载依赖)
        if: env.WRT_TEST != 'true'
        run: cd ./wrt/ && make download -j"$(nproc)"

      - name: Compile Firmware(编译固件)
        if: env.WRT_TEST != 'true'
        run: |
          cd ./wrt/
          if [[ "${WRT_CONFIG,,}" == *"small"* || "${WRT_CONFIG,,}" == *"samll"* ]]; then
            make -j"$(nproc)" || make -j"$(nproc)" V=s
          else
            make -j"$(nproc)" || { echo "==== parallel build failed; retry serial with verbose ===="; make -j1 V=s; }
          fi

      - name: Package Firmware(打包固件)
        run: |
          cd ./wrt/ && mkdir -p ./upload/
          cp -f ./.config ./upload/Config-"$WRT_CONFIG"-"$WRT_INFO"-"$WRT_BRANCH"-"$WRT_DATE".txt || true

          if [[ $WRT_TEST != 'true' ]]; then
            KVER_FILE="$(find ./bin/targets/ -type f -name "*.manifest" | head -n1)"
            if [[ -f "$KVER_FILE" ]]; then
              KV=$(grep -E '^kernel - [0-9.]+' "$KVER_FILE" | awk '{print $3}' | head -n1)
              echo "WRT_KVER=${KV:-none}" >> $GITHUB_ENV
              LL=$(grep -E '^luci-(app|theme)[^ ]*' "$KVER_FILE" | awk '{print $1}' | tr '\n' ' ')
              echo "WRT_LIST=${LL:-none}" >> $GITHUB_ENV
            fi

            if [[ -z "${WRT_TARGET}" || "${WRT_TARGET}" == " " ]]; then
              TDIR=$(find ./bin/targets -maxdepth 2 -mindepth 2 -type d | head -n1)
              if [[ -n "$TDIR" ]]; then
                echo "WRT_TARGET=$(basename "$TDIR")" >> $GITHUB_ENV
              else
                TCFG=$(grep -m1 -oE '^CONFIG_TARGET_[A-Za-z0-9_]+' .config | sed 's/^CONFIG_TARGET_//')
                echo "WRT_TARGET=${TCFG:-unknown}" >> $GITHUB_ENV
              fi
            fi

            find ./bin/targets/ -iregex ".*\\(buildinfo\\|json\\|sha256sums\\|packages\\)$" -exec rm -rf {} + || true

            while IFS= read -r -d '' FILE; do
              EXT=$(basename "$FILE" | cut -d '.' -f 2-)
              NAME=$(basename "$FILE" | cut -d '.' -f 1 | sed -E "s/^.*(${WRT_TARGET}).*/\\1/")
              NEW_FILE="${WRT_INFO}-${WRT_BRANCH}-${NAME}-${WRT_DATE}.${EXT}"
              mv -f "$FILE" "./upload/$NEW_FILE" || true
            done < <(find ./bin/targets/ -type f -iname "*${WRT_TARGET}*" -print0)

            find ./bin/targets/ -type f -exec mv -f {} ./upload/ \; || true

            export LDFLAGS="-fuse-ld=lld"
            make clean -j"$(nproc)" || true
          fi

      - name: Release Firmware(发布固件)
        uses: softprops/action-gh-release@master
        with:
          tag_name: ${{ env.WRT_CONFIG }}-${{ env.WRT_INFO }}-${{ env.WRT_BRANCH }}-${{ env.WRT_DATE }}
          files: ./wrt/upload/*.*
          body: |
            这是个平台固件包，内含多个设备！
            请注意选择你需要的设备固件！
            不要问，刷就完事了！
