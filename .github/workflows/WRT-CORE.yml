# 云编译公用核心
name: WRT-CORE

on:
  workflow_call:
    inputs:
      WRT_CONFIG:
        required: true
        type: string
      WRT_THEME:
        required: true
        type: string
      WRT_NAME:
        required: true
        type: string
      WRT_SSID:
        required: true
        type: string
      WRT_WORD:
        required: true
        type: string
      WRT_IP:
        required: true
        type: string
      WRT_PW:
        required: true
        type: string
      WRT_REPO:
        required: true
        type: string
      WRT_BRANCH:
        required: true
        type: string
      WRT_SOURCE:
        required: true
        type: string
      WRT_PACKAGE:
        required: false
        type: string
      WRT_TEST:
        required: false
        type: string

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  WRT_CONFIG: ${{ inputs.WRT_CONFIG }}
  WRT_THEME: ${{ inputs.WRT_THEME }}
  WRT_NAME: ${{ inputs.WRT_NAME }}
  WRT_SSID: ${{ inputs.WRT_SSID }}
  WRT_WORD: ${{ inputs.WRT_WORD }}
  WRT_IP: ${{ inputs.WRT_IP }}
  WRT_PW: ${{ inputs.WRT_PW }}
  WRT_REPO: ${{ inputs.WRT_REPO }}
  WRT_BRANCH: ${{ inputs.WRT_BRANCH }}
  WRT_SOURCE: ${{ inputs.WRT_SOURCE }}
  WRT_PACKAGE: ${{ inputs.WRT_PACKAGE }}
  WRT_TEST: ${{ inputs.WRT_TEST }}

jobs:
  core:
    name: ${{ inputs.WRT_SOURCE }}
    runs-on: ubuntu-latest
    steps:
      - name: Check Server Performance(检查服务器性能)
        run: |
          echo "警告⚠"
          echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
          echo -e "已知CPU型号（降序）：7763，8370C，8272CL，8171M，E5-2673 \n"
          echo "--------------------------CPU信息--------------------------"
          echo "CPU物理数量：$(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
          echo -e "CPU核心信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
          echo "--------------------------内存信息--------------------------"
          echo "已安装内存详细信息："
          echo -e "$(sudo lshw -short -C memory | grep GiB) \n"
          echo "--------------------------硬盘信息--------------------------"
          echo "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

      - name: Initialization Environment(安装依赖环境)
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt -yqq purge firefox
          sudo -E apt -yqq update
          sudo -E apt -yqq full-upgrade
          sudo -E apt -yqq autoremove --purge
          sudo -E apt -yqq autoclean
          sudo -E apt -yqq clean
          sudo -E apt -yqq install dos2unix python3-netifaces libfuse-dev clang
          sudo bash -c 'bash <(curl -sL https://build-scripts.immortalwrt.org/init_build_environment.sh)'
          sudo -E systemctl daemon-reload
          sudo -E timedatectl set-timezone "Asia/Shanghai"

          echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV

      - name: Combine Disks(合并磁盘)
        uses: easimon/maximize-build-space@master
        with:
          swap-size-mb: 2048
          temp-reserve-mb: 100
          root-reserve-mb: 2048

      - name: Checkout Projects(拉取云编译仓库脚本)
        uses: actions/checkout@main

      - name: Initialization Values(初始化变量)
        run: |
          echo "WRT_DATE=$(TZ=UTC-8 date +"%y.%m.%d-%H.%M.%S")" >> $GITHUB_ENV
          echo "WRT_MARK=${GITHUB_REPOSITORY%%/*}" >> $GITHUB_ENV
          echo "WRT_INFO=${WRT_SOURCE%%/*}" >> $GITHUB_ENV
          echo "WRT_TARGET=$(grep -m 1 -oP '^CONFIG_TARGET_\K[\w]+(?=\=y)' ./Config/$WRT_CONFIG.txt)" >> $GITHUB_ENV
          echo "WRT_KVER=none" >> $GITHUB_ENV
          echo "WRT_LIST=none" >> $GITHUB_ENV
          sudo mkdir -p $OPENWRT_PATH/build_wrt
          sudo chown $USER:$USER $OPENWRT_PATH/build_wrt
          sudo ln -s $OPENWRT_PATH/build_wrt $GITHUB_WORKSPACE/wrt

      - name: Clone Code(拉取固件源码)
        run: |
          git clone --depth=1 --single-branch --branch $WRT_BRANCH $WRT_REPO ./wrt/
          cd ./wrt/ && echo "WRT_HASH=$(git log -1 --pretty=format:'%h')" >> $GITHUB_ENV
          PROJECT_MIRRORS_FILE="./scripts/projectsmirrors.json"
          if [ -f "$PROJECT_MIRRORS_FILE" ]; then
            sed -i '/.cn\//d; /tencent/d; /aliyun/d' "$PROJECT_MIRRORS_FILE"
          fi

      - name: Check Scripts(统一执行权限)
        run: |
          find ./ -maxdepth 3 -type f -iregex ".*\(txt\|sh\)$" -exec dos2unix {} \; -exec chmod +x {} \;

      - name: Update Feeds(更新软件包源)
        run: |
          cd ./wrt/
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Custom Packages(自定义软件包)
        run: |
          # 先在 wrt 根目录执行 SMALL/非 SMALL 分流脚本
          cd ./wrt/

          if [[ "${WRT_CONFIG,,}" == *"small"* || "${WRT_CONFIG,,}" == *"samll"* ]]; then
            echo ">> Detected SMALL config, using Packages_small.sh"
            bash $GITHUB_WORKSPACE/Scripts/Packages_small.sh
          else
            echo ">> Using standard Packages.sh"
            bash $GITHUB_WORKSPACE/Scripts/Packages.sh
          fi

          # 再切到 package 目录执行 Handles.sh（该脚本假设在 package 下工作）
          cd ./package/
          bash $GITHUB_WORKSPACE/Scripts/Handles.sh

      - name: Custom Settings(自定义设置)
        run: |
          cd ./wrt/
          if [[ "${WRT_CONFIG,,}" == *"test"* || "${WRT_CONFIG,,}" == *"small"* || "${WRT_CONFIG,,}" == *"samll"* ]]; then
            cat $GITHUB_WORKSPACE/Config/$WRT_CONFIG.txt >> .config
          else
            cat $GITHUB_WORKSPACE/Config/$WRT_CONFIG.txt $GITHUB_WORKSPACE/Config/GENERAL.txt >> .config
          fi
          $GITHUB_WORKSPACE/Scripts/Settings.sh
          make defconfig -j$(nproc) && make clean -j$(nproc)

      - name: Download Packages(下载依赖)
        if: env.WRT_TEST != 'true'
        run: cd ./wrt/ && make download -j$(nproc)

      - name: Compile Firmware(编译固件)
        if: env.WRT_TEST != 'true'
        run: cd ./wrt/ && make -j$(nproc) || make -j$(nproc) V=s

      - name: Package Firmware(打包固件)
        run: |
          cd ./wrt/ && mkdir ./upload/
          cp -f ./.config ./upload/Config-"$WRT_CONFIG"-"$WRT_INFO"-"$WRT_BRANCH"-"$WRT_DATE".txt
          if [[ $WRT_TEST != 'true' ]]; then
            echo "WRT_KVER=$(find ./bin/targets/ -type f -name "*.manifest" -exec grep -oP '^kernel - \K[\d\.]+' {} \;)" >> $GITHUB_ENV
            echo "WRT_LIST=$(find ./bin/targets/ -type f -name "*.manifest" -exec grep -oP '^luci-(app|theme)[^ ]*' {} \; | tr '\n' ' ')" >> $GITHUB_ENV
            echo "NSS_FIRMWARE_VERSION=$(grep -oP '^CONFIG_NSS_FIRMWARE_VERSION_\K[\d_]+(?==y)' .config | sed 's/_/./g')" >> $GITHUB_ENV
            find ./bin/targets/ -iregex ".*\(buildinfo\|json\|sha256sums\|packages\)$" -exec rm -rf {} +
            for FILE in $(find ./bin/targets/ -type f -iname "*$WRT_TARGET*") ; do
              EXT=$(basename $FILE | cut -d '.' -f 2-)
              NAME=$(basename $FILE | cut -d '.' -f 1 | grep -io "\($WRT_TARGET\).*")
              NEW_FILE="$WRT_INFO"-"$WRT_BRANCH"-"$NAME"-"$WRT_DATE"."$EXT"
              mv -f $FILE ./upload/$NEW_FILE
            done
            find ./bin/targets/ -type f -exec mv -f {} ./upload/ \;
            export LDFLAGS="-fuse-ld=lld"
            make clean -j$(nproc)
          fi

      - name: Release Firmware(发布固件)
        uses: softprops/action-gh-release@master
        with:
          tag_name: ${{ env.WRT_CONFIG }}-${{ env.WRT_INFO }}-${{ env.WRT_BRANCH }}-${{ env.WRT_DATE }}
          files: ./wrt/upload/*.*
          body: |
            这是个平台固件包，内含多个设备！
            请注意选择你需要的设备固件！
            不要问，刷就完事了！
